{"version":3,"file":"static/js/891.2882a207.chunk.js","mappings":"wLAGA,MAAMA,UAAmBC,EAAAA,UACvBC,WAAAA,CAAYC,GACVC,MAAMD,GAAO,KAgEfE,gBAAkB,KACZC,OAAOC,QAAUD,OAAOC,OAAOC,MAIjCC,WAAWC,KAAKL,gBAAiB,IACnC,EArEAK,KAAKC,MAAQD,KAAKE,eAClBF,KAAKG,aAAeH,KAAKG,aAAaC,KAAKJ,MAC3CA,KAAKK,aAAeL,KAAKK,aAAaD,KAAKJ,MAC3CA,KAAKM,kBAAoBN,KAAKM,kBAAkBF,KAAKJ,MACrDA,KAAKO,aAAe,EACtB,CAEAL,YAAAA,GACE,MAAO,CACLM,KAAM,GACNC,eAAgB,GAChBC,KAAM,GACNT,MAAO,GACPU,SAAU,GACVC,cAAe,GAEnB,CAEAT,YAAAA,CAAaU,GACX,MAAM,KAAEL,EAAI,MAAEM,GAAUD,EAAME,OAC9Bf,KAAKgB,SAAS,CAAE,CAACR,GAAOM,GAC1B,CAEAT,YAAAA,CAAaQ,GACXA,EAAMI,iBAENjB,KAAKP,MAAMyB,SAASlB,KAAKC,MAC3B,CAEAK,iBAAAA,GAAqB,IAADa,EAElB,MAAMC,EAAQpB,KAAKO,aAAac,WAChC,IAAKD,EAAME,SAET,YADAC,QAAQC,MAAM,2BAIhB,MAAMC,EAAoBL,EAAMM,mBAChC,IAAIhB,EAAO,GACPT,EAAQ,GAGZwB,EAAkBE,SAAQC,IACpBA,EAAUC,MAAMC,SAAS,YAC3BpB,EAAOkB,EAAUG,UACRH,EAAUC,MAAMC,SAAS,iCAClC7B,EAAQ2B,EAAUI,WACpB,IAIFhC,KAAKgB,SAAS,CACZN,OACAT,QACAU,UAAmF,QAAzEQ,EAAAC,EAAMM,mBAAmBO,MAAKC,GAAQA,EAAKL,MAAMC,SAAS,wBAAe,IAAAX,OAAA,EAAzEA,EAA2Ea,aAAc,GACnGpB,cAAeQ,EAAMe,KAEzB,CAEAC,iBAAAA,GACEpC,KAAKL,iBACP,CAWAW,iBAAAA,GAEE,MAAMc,EAAQpB,KAAKO,aAAac,WAGhC,IAAIgB,EAAU,GACdjB,EAAMM,mBAAmBC,SAASC,IAC5BA,EAAUC,MAAMC,SAAS,iBAC3BO,EAAUT,EAAUG,UACtB,IAIFR,QAAQe,IAAI,qBAAsBD,EAEpC,CAEAhC,YAAAA,CAAaQ,GACXA,EAAMI,iBACFjB,KAAKP,MAAMyB,SACblB,KAAKP,MAAMyB,SAASlB,KAAKgB,SAAShB,KAAKC,QAEvCsB,QAAQC,MAAM,2CAElB,CAEAe,MAAAA,GACE,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJD,EAAAA,EAAAA,MAAA,QAAMG,SAAU3C,KAAKK,aAAaoC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SACEE,GAAG,eACHC,UAAU,cACVC,IAAI,QACJC,KAAK,OACLC,YAAY,0BACZC,aAAa,MACbC,SAAUlD,KAAKG,gBAGjBuC,EAAAA,EAAAA,KAAA,UAAQK,KAAK,SAAQN,SAAC,gBAI9B,EAGF,SAAeU,EAAAA,EAAAA,KAAf,CAAyB7D,E","sources":["MainScreen/Quotation.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nclass ParlorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initialState();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePlaceSelect = this.handlePlaceSelect.bind(this);\n    this.autocomplete = \"\";\n  }\n\n  initialState() {\n    return {\n      name: '',\n      street_address: '',\n      city: '',\n      state: '',\n      zip_code: '',\n      googleMapLink: ''\n    };\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    // Dispatch your action with the updated state\n    this.props.dispatch(this.state);\n  }\n\n  handlePlaceSelect() {\n    // Accessing the details from the Autocomplete instance\n    const place = this.autocomplete.getPlace();\n    if (!place.geometry) {\n      console.error('Place details not found');\n      return;\n    }\n\n    const addressComponents = place.address_components;\n    let city = '';\n    let state = '';\n\n    // Loop through address components to find city and state\n    addressComponents.forEach(component => {\n      if (component.types.includes('locality')) {\n        city = component.long_name;\n      } else if (component.types.includes('administrative_area_level_1')) {\n        state = component.short_name;\n      }\n    });\n\n    // Update the state with retrieved city and state\n    this.setState({\n      city,\n      state,\n      zip_code: place.address_components.find(comp => comp.types.includes('postal_code'))?.short_name || '',\n      googleMapLink: place.url\n    });\n  }\n\n  componentDidMount() {\n    this.checkGoogleMaps();\n  }\n  \n  checkGoogleMaps = () => {\n    if (window.google && window.google.maps) {\n      // Initialize the Autocomplete or perform necessary actions here\n    } else {\n      // Check again after a delay\n      setTimeout(this.checkGoogleMaps, 100); // Check again after 100ms\n    }\n  }\n  \n  handlePlaceSelect() {\n    // Get the selected place from the Autocomplete object\n    const place = this.autocomplete.getPlace();\n  \n    // Extract and process the address components\n    let zipCode = '';\n    place.address_components.forEach((component) => {\n      if (component.types.includes('postal_code')) {\n        zipCode = component.long_name;\n      }\n    });\n  \n    // Do something with the extracted zip code (e.g., save it in state or perform further actions)\n    console.log('Selected zip code:', zipCode);\n    // You can set the zip code in state or use it as needed in your application\n  }\n  \n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.props.dispatch) {\n      this.props.dispatch(this.setState(this.state)); // Issue is here\n    } else {\n      console.error('Dispatch function not available in props');\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>Add New Location</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            id=\"autocomplete\"\n            className=\"input-field\"\n            ref=\"input\"\n            type=\"text\"\n            placeholder=\"City or Zip/Postal Code\"\n            autoComplete=\"off\"\n            onChange={this.handleChange}\n          />\n          {/* Other input fields for name, street_address, etc. */}\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default connect()(ParlorForm);\n"],"names":["ParlorForm","React","constructor","props","super","checkGoogleMaps","window","google","maps","setTimeout","this","state","initialState","handleChange","bind","handleSubmit","handlePlaceSelect","autocomplete","name","street_address","city","zip_code","googleMapLink","event","value","target","setState","preventDefault","dispatch","_place$address_compon","place","getPlace","geometry","console","error","addressComponents","address_components","forEach","component","types","includes","long_name","short_name","find","comp","url","componentDidMount","zipCode","log","render","_jsxs","children","_jsx","onSubmit","id","className","ref","type","placeholder","autoComplete","onChange","connect"],"sourceRoot":""}